import java.util.*;import java.io.*;import java.util.function.*;public class Tool {    public static BufferedReader openFile(String fname) throws FileNotFoundException {        File file = new File(fname);        BufferedReader br;        try {            br = new BufferedReader(new FileReader(file));        } catch(FileNotFoundException ex) {            System.out.println("File "+fname+" not found.");            throw ex;        }        return br;        }    public static void callForEachLineFrom(int fromLine, String fname, Consumer<String> function) throws Exception {        BufferedReader br = openFile(fname);        String line = null;        int currentLine = 0;        while ((line = br.readLine()) != null) {            if (currentLine >= fromLine)                function.accept(line);            currentLine++;        }        br.close();    }    public static Graph argsToGraph(String[] args) throws Exception {        Profiler.startTimeProfile("INPUT");        Integer nodesCount;        Boolean ifIgnoreTarget = false;        String nodeInfoFName, adjMatrixFName, startStopFName;        try {            if (args.length != 1 && args.length != 2) {                throw new IllegalArgumentException("Incorrect number of arguments.");            }            nodesCount = Integer.parseInt(args[0]);            if (args.length == 2) {                if (!args[1].toLowerCase().equals("all"))                    throw new IllegalArgumentException("Something else instead of 'all' keyword supplied.");                ifIgnoreTarget = true;                }        } catch (Exception ex) {            System.out.println("Wrong arguments.");            System.out.println("Arguments: NumberOfNodes [all]");            throw ex;        }                nodeInfoFName  = "Node_Information_of_Graph_G.txt";        adjMatrixFName = "AdjacencyMatrix_of_Graph_G.txt";        startStopFName = "SourceNode_StoppingCondition.txt";        Graph graph = new Graph(nodesCount);        try {            System.out.println("Reading node information...");            callForEachLineFrom(1, nodeInfoFName, graph::populateCityInformation);            System.out.println("finished.");            if (graph.countNodes() != nodesCount) {                throw new Exception("Number of nodes clashes with number of information records: "+nodesCount+" != "+graph.countNodes()+".");            }            BufferedReader br = openFile(adjMatrixFName);            graph.populateEdges(br);            br = openFile(startStopFName);            graph.populateTask(br, ifIgnoreTarget);            Profiler.endTimeProfile("INPUT");            return graph;        } catch(Exception ex) {            System.out.println("Error:"+ex.getMessage());            throw ex;        }    }}